@class GrammarParser

@subheader """
from ast import literal_eval
from token import COMMENT, DEDENT, INDENT, NL, OP

from story6.grammar import Grammar, Rule, Alt, NamedItem

BaseParser = Parser

class Parser(BaseParser):

    def __init__(self, tokenizer):
        super().__init__(tokenizer)
        self.extra_rules = []

    def gen_rule(self, alts):
        name = f"_gen_rule_{len(self.extra_rules)}"
        rule = Rule(name, alts)
        self.extra_rules.append(rule)
        return rule
"""

start: grammar ENDMARKER { grammar }

grammar:
    | metas rules { Grammar(rules + self.extra_rules, metas) }
    | rules { Grammar(rules + self.extra_rules, []) }

metas:
    | meta metas { [meta] + metas }
    | meta { [meta] }
    | blank metas { metas }
    | blank { [] }

meta:
    | "@" NAME NEWLINE { (name.string, None) }
    | "@" NAME NAME NEWLINE { (name.string, name1.string) }
    | "@" NAME STRING NEWLINE { (name.string, literal_eval(string.string)) }

rules:
    | rule rules { [rule] + rules }
    | rule { [rule] }
    | blank rules { rules }
    | blank { [] }

rule:
    | NAME ":" alts NEWLINE INDENT more_alts DEDENT { Rule(name.string, alts + more_alts) }
    | NAME ":" NEWLINE INDENT more_alts DEDENT { Rule(name.string, more_alts) }
    | NAME ":" alts NEWLINE { Rule(name.string, alts) }

more_alts:
    | "|" alts NEWLINE more_alts { alts + more_alts }
    | "|" alts NEWLINE { alts }
    | blank more_alts { more_alts }
    | blank { [] }

alts:
    | alt "|" alts { [alt] + alts }
    | alt { [alt] }

alt:
    | items action { Alt(items, action[1:-1].strip()) }
    | items { Alt(items, None) }

items:
    | item items { [item] + items }
    | item { [item] }

item:
    | NAME '=' atom { NamedItem(name.string, atom) }
    | atom { atom }

atom:
    | NAME { name.string }
    | STRING {string.string }
    | "(" alts ")" { self.gen_rule(alts).name }

action: "{" stuffs "}" { "{" + stuffs + "}" }

stuffs:
    | stuff stuffs { stuff + " " + stuffs }
    | stuff { stuff }

stuff:
    | action { action }
    | NAME { name.string }
    | NUMBER { number.string }
    | STRING { string.string }
    | OP { op.string if op.string not in ("{", "}") else None }

blank: NL | COMMENT
